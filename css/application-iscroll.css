/* Force list items to be cached on WebKit
   See: cubiq.org/you-shall-not-flicker

   If this is NOT used, then scrolling long lists might exhibit a "flicker" when scrolling
   toward the bottom of the list, as well as exhibit slow and jerky until the first
   time the user has reached the bottom of the list.

   If this IS used, then the browser may be forced to cache the content in advance, resulting
   in smoother scrolling, but with the side-effect of increasing initial rendering time.

   This can more than DOUBLE initial rendering time if you are not careful with the selector. The
   recommended CSS at the above link is NOT optimal.

   You need to apply this judiciously. For example, if you know your scroller content consists
   of list items, use "li" not "*' to select. * as the right-most component of a select is
   horribly expensive. A small additional performance gain can be made by selecting
   iscroll-content instead of iscroll-scroller. You might get a
   glitch on a pull-up if you have one, but it's a small price to pay for doubling speed.

   It is important NOT to apply this to .iscroll-scroller itself. This will result in a huge
   performance loss. The second rule below gives performance on iOS devices very close to not
   using this at all.

   I use an @media tag to disable, because it is a safe way of disabling CSS that might contain
   comments. As well, you might like to enable this only for certain devices, which often
   can be detected using media queries.

*/

/* This one will always work to eliminate the flicker, regardless of scroller content but
   is very slow at initial rendering. The scroller may not be initially responsive after
   a page is first rendered */
@media DISABLED {
  .iscroll-scroller,
  .iscroll-scroller * {
    -webkit-transform: translateZ(0);
  }
}

/* Force list items to be cached on WebKit
   See: cubiq.org/you-shall-not-flicker

   If this is NOT used, then scrolling long lists might exhibit a "flicker" when scrolling
   toward the bottom of the list, as well as exhibit slow and jerky until the first
   time the user has reached the bottom of the list.

   If this IS used, then the browser may be forced to cache the content in advance, resulting
   in smoother scrolling, but with the side-effect of increasing initial rendering time.

   This can more than DOUBLE initial rendering time if you are not careful with the selector. The
   recommended CSS at the above link is NOT optimal.

   You need to apply this judiciously. For example, if you know your scroller content consists
   of list items, use "li" not "*' to select. * as the right-most component of a select is
   horribly expensive. A small additional performance gain can be made by selecting
   iscroll-content instead of iscroll-scroller. You might get a
   glitch on a pull-up if you have one, but it's a small price to pay for doubling speed.

   It is important NOT to apply this to .iscroll-scroller itself. This will result in a huge
   performance loss. The second rule below gives performance on iOS devices very close to not
   using this at all.

   I use an @media tag to disable, because it is a safe way of disabling CSS that might contain
   comments. As well, you might like to enable this only for certain devices, which often
   can be detected using media queries.

*/

/* This one will always work to eliminate the flicker, regardless of scroller content but
   is very slow at initial rendering. The scroller may not be initially responsive after
   a page is first rendered */
@media DISABLED {
  .iscroll-scroller,
  .iscroll-scroller * {
    -webkit-transform: translateZ(0);
  }
}

/* So, for the demo, I'm using this one, which doesn't target the scroller itself, and
   targets specific top-level elements inside the scroller. */
@media all {
  .iscroll-content li  {
    -webkit-transform: translateZ(0);
  }
}

/* Remove the background gradients from buttons in the scroller. It's very costly to scroll these
   around, because they are really just generated bitmaps, after all. You can use these same
   rules to style the up/down/hover appearance of listview buttons in the scroller. If you
   do want to use gradients - particularly if building a native or webapp, consider using gradient
   images rather than CSS-generated gradients,  because they have been proven faster than CSS
   gradients. If you are developing a website, using image gradients will increase the download
   time, both due to the size of the images (but generally small) and the additional round-trip(s).

   I eliminate text shadows as well, as these reportedly degrade performance on Android
   browsers.
*/

.iscroll-content .ui-listview li.ui-btn-up-c
  {
  background-image: none;
  text-shadow: none;
  }

.iscroll-content .ui-listview li.ui-btn-hover-c
  {
  background-image: none;
  text-shadow: none;
  }

.iscroll-content .ui-listview li.ui-btn-down-c
  {
  background-image: none;
  text-shadow: none;
  }

/* If you want to change the text color or other text properties of listview buttons in the scroller,
   you have to do it here, not above.
*/
.iscroll-content .ui-listview *.ui-btn-up-c a.ui-link-inherit
  {
  }

.iscroll-content. .ui-listview *.ui-btn-hover-c a.ui-link-inherit
  {
  }

.iscroll-content .ui-listview *.ui-btn-down-c a.ui-link-inherit
  {
  }

/* Remove background image from non-button scroller content */
.iscroll-content .ui-body-c
  {
  background-image: none;
  }






